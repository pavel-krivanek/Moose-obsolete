"
I represent usage data generated by windows. 
All events have a timestamp.
"
Class {
	#name : #GTWindowRecorderEvent,
	#superclass : #GTBasicRecorderEvent,
	#category : #'GT-Window-EventRecorder-Events'
}

{ #category : #'instance creation' }
GTWindowRecorderEvent class >> fromAnnouncement: anAnnouncement [

	^ self new fromAnnouncement: anAnnouncement
]

{ #category : #initialization }
GTWindowRecorderEvent >> addTypeFor: anAnnouncement [
	| type |

	type := anAnnouncement window eventRecorderWindowType class name.
	
	(GTWindowEventCollector commonWindowTypes includes: type)
		ifTrue: [ self infoAt: #type put: type ]
		ifFalse: [ self infoAt: #type putHashForText: type ]
]

{ #category : #initialization }
GTWindowRecorderEvent >> fromAnnouncement: anAnnouncement [
	
	self addTypeFor: anAnnouncement.
	self infoAt: #label putHashForText: anAnnouncement window label.
	self infoAt: #windowHash put: anAnnouncement window identityHash.
]

{ #category : #testing }
GTWindowRecorderEvent >> isWindowActivated [

	^ false
]

{ #category : #testing }
GTWindowRecorderEvent >> isWindowClosed [
	^ false
]

{ #category : #testing }
GTWindowRecorderEvent >> isWindowCollapsed [
	^ false
]

{ #category : #testing }
GTWindowRecorderEvent >> isWindowDeActivated [
	^ false
]

{ #category : #testing }
GTWindowRecorderEvent >> isWindowExpanded [
	^ false
]

{ #category : #testing }
GTWindowRecorderEvent >> isWindowLabelled [
	^ false
]

{ #category : #testing }
GTWindowRecorderEvent >> isWindowOpened [
	^ false
]

{ #category : #accessing }
GTWindowRecorderEvent >> label [

	^ self infoAt: #label
]

{ #category : #accessing }
GTWindowRecorderEvent >> windowHash [

	^ self infoAt: #windowHash
]

{ #category : #accessing }
GTWindowRecorderEvent >> windowType [

	^ self infoAt: #type
]
