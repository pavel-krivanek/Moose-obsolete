generated
symbolNames
	^ #('"}"' '"="' '"["' '"]"' '","' '"{"' '"strictfp"' '"class"' '"extends"' '"implements"' '"void"' '"("' '"enum"' '"default"' '":"' '"if"' '"super"' '"interface"' '")"' '"..."' '"throws"' '"this"' '"transient"' '"volatile"' '"char"' '"float"' '"double"' '"."' '"int"' '"long"' '"else"' '"boolean"' '"byte"' '"short"' '"package"' '";"' '"abstract"' '"final"' '"native"' '"synchronized"' '"private"' '"static"' '"import"' '"*"' '"public"' '"protected"' '"switch"' '"@"' '"^"' '"|"' '"&&"' '"||"' '"!="' '"&"' '"<="' '">="' '"instanceof"' '"case"' '"?"' '"*="' '">>>="' '"&="' '"^="' '"|="' '"<<="' '">>="' '"/="' '"%="' '"+="' '"-="' '"=="' '"<"' '"<<"' '"try"' '"catch"' '"finally"' '"continue"' '"return"' '"while"' '"do"' '"for"' '"break"' '"assert"' '"throw"' '"~"' '"!"' '"/"' '"->"' '"%"' '"-"' '"+"' '"new"' '"::"' '"--"' '"++"' '<GREATER_THAN>' '<SIGNED_RIGHT_SHIFT>' '<UNSIGNED_RIGHT_SHIFT>' '<INTEGER_LITERAL>' '<FLOATING_POINT_LITERAL>' '<BOOLEAN_LITERAL>' '<CHARACTER_LITERAL>' '<STRING_LITERAL>' '<NULL_LITERAL>' '<IDENTIFIER>' '<whitespace>' '<comment>' '<patternToken>' 'type_declaration' 'expression' 'literal' 'primitive_type' 'reference_type' 'type' 'numeric_type' 'integral_type' 'floating_point_type' 'class_or_interface_type' 'array_type' 'type_name' 'class_type' 'interface_type' 'dims' 'simple_name' 'qualified_name' 'name' 'block_statement' 'package_declaration_opt' 'import_declarations_opt' 'type_declarations_opt' 'package_declaration' 'import_declarations' 'type_declarations' 'import_declaration' 'annotations' 'single_type_import_declaration' 'type_import_on_demand_declaration' 'static_opt' 'class_declaration' 'interface_declaration' 'annotation_interface_declaration' 'modifiers' 'modifiers_opt' 'modifier' 'annotation' 'type_parameters_opt' 'super_opt' 'interfaces_opt' 'class_body' 'enum_declaration' 'super' 'interface_type_list' 'interfaces' 'class_body_declarations_opt' 'class_body_declarations' 'class_body_declaration' 'class_member_declaration' 'static_initializer' 'constructor_declaration' 'goal' 'field_declaration' 'method_declaration' 'variable_declarators' 'variable_declarator' 'variable_declarator_id' 'initialized_variable_declarator' 'variable_initializer' 'array_initializer' 'method_header' 'method_body' 'method_declarator' 'throws_opt' 'void' 'formal_parameter_list_opt' 'formal_parameter_list' 'formal_parameter' 'variable_modifiers' 'throws' 'class_type_list' 'constructor_declarator' 'constructor_body' 'explicit_constructor_invocation' 'block_statements' 'argument_list_opt' 'primary' 'extends_interfaces_opt' 'interface_body' 'annotation_interface_body' 'annotation_interface_member_declarations_opt' 'annotation_interface_member_declarations' 'annotation_interface_member_declaration' 'annotation_method_declaration' 'abstract_method_declaration' 'extends_interfaces' 'interface_member_declarations_opt' 'interface_member_declarations' 'interface_member_declaration' 'constant_declaration' 'variable_initializers' 'block_statements_opt' 'local_variable_declaration_statement' 'statement' 'local_variable_declaration' 'statement_without_trailing_substatement' 'labeled_statement' 'if_then_statement' 'if_then_else_statement' 'while_statement' 'for_statement' 'foreach_statement' 'empty_statement' 'compilation_unit' 'switch_statement' 'do_statement' 'break_statement' 'continue_statement' 'return_statement' 'synchronized_statement' 'throw_statement' 'try_statement' 'assert_statement' 'statement_expression' 'assignment' 'preincrement_expression' 'predecrement_expression' 'postincrement_expression' 'postdecrement_expression' 'method_invocation' 'class_instance_creation_expression' 'switch_block' 'switch_block_statement_groups' 'switch_labels' 'switch_block_statement_group' 'switch_label' 'constant_expression' 'for_init_opt' 'expression_opt' 'for_update_opt' 'for_init' 'statement_expression_list' 'for_update' 'identifier_opt' 'try_resources_opt' 'catches' 'catches_opt' 'finally' 'try_resources' 'semicolon_opt' 'try_resource' 'catch_clause' 'primary_no_new_array' 'array_creation_expression' 'field_access' 'array_access' 'lambda_parameters' 'lambda_function' 'lambda_expression' 'lambda_parameter_list_opt' 'untyped_lambda_parameter' 'lambda_parameter_list' 'lambda_parameter' 'assignment_expression' 'method_reference_expression' 'primary_or_name' 'type_arguments_opt' 'type_arguments_or_diamond_opt' 'argument_list' 'dim_exprs' 'dims_opt' 'dim_expr' 'empty_dim_expr' 'postfix_expression' 'unary_expression' 'unary_expression_not_plus_minus' 'cast_expression' 'multiplicative_expression' 'additive_expression' 'shift_expression' 'relational_expression' 'equality_expression' 'and_expression' 'exclusive_or_expression' 'inclusive_or_expression' 'conditional_and_expression' 'conditional_or_expression' 'conditional_expression' 'left_hand_side' 'assignment_operator' 'annotation_args_opt' 'annotation_args' 'elementValuePairs' 'elementValue' 'elementValuePair' 'elementValueArrayInitializer' 'elementValues_opt' 'comma_opt' 'elementValues' 'enum_body' 'enum_constants_opt' 'enum_body_declarations_opt' 'enum_constants' 'enum_constant' 'arguments_opt' 'class_body_opt' 'enum_body_declarations' 'type_parameters' 'type_parameter' 'extends_type_parameter_opt' 'type_bound' 'type_arguments' 'type_argument' 'type_argument_type' 'simple_type_name' 'qualified_type_name' 'variable_modifier' 'E O F' 'error' 'expression_statement' 'B e g i n' 'block')