Class {
	#name : #RGTest,
	#superclass : #TestCase,
	#category : #'Ring2-Tests-Core'
}

{ #category : #utilities }
RGTest >> checkHierarchyConsistencyOf: anRGClass [

	"prove that all relations between class, superclass, metaclass and superclass metaclass are consistent"

	self assert: (anRGClass ~~ anRGClass superclass).
	self assert: (anRGClass ~~ anRGClass metaclass).
	self assert: (anRGClass ~~ anRGClass superclass metaclass).

	self assert: (anRGClass superclass ~~ anRGClass metaclass).
	self assert: (anRGClass superclass ~~ anRGClass superclass metaclass).
	self assert: (anRGClass metaclass ~~ anRGClass superclass metaclass).

	self assert: (anRGClass superclass superclass == anRGClass superclass).
	self assert: (anRGClass superclass metaclass == anRGClass metaclass superclass).

	self assert: (anRGClass superclass metaclass superclass == anRGClass superclass metaclass).
	self assert: (anRGClass superclass metaclass metaclass == anRGClass superclass metaclass).
	

]

{ #category : #utilities }
RGTest >> checkImplicitSingleClassEnvironmentOf: anRGClass [
	
	self deny: (anRGClass isRingResolved).

	"we have SomeClass, SomeClass class, SomeClass superclass, SomeClass superclass class"
	self assert: anRGClass environment ask behaviors size equals: 4.

	"we have one package for SomeClass and SomeClass class, other for SomeClass superclass 
	and SomeClass superclass class"	
	self assert: anRGClass environment ask packages size equals: 2.

	self checkHierarchyConsistencyOf: anRGClass.
	
	
	

]

{ #category : #utilities }
RGTest >> checkImplicitSingleTraitEnvironmentOf: anRGTrait [
	
	self assert: anRGTrait environment ask behaviors size equals: 10.
	self assert: anRGTrait environment ask packages size equals: 5.

	self checkHierarchyConsistencyOf: anRGTrait metaclass.
	
	self assert: (anRGTrait ~~ anRGTrait classTrait).
	self assert: (anRGTrait superclass == anRGTrait superclass).
	self assert: (anRGTrait classTrait superclass == anRGTrait classTrait superclass).
	
	
	
	

]

{ #category : #tests }
RGTest >> checkIncompatible: aBlock [

	"prove that the block tries to do an action not suitable for a particular behavior strategy"

	self should: aBlock raise: RGIncompatibleBehaviorTypeError

]
