accessing
codeTemplatesArray
	^super codeTemplatesArray ,
		#(
			#(#addAllSendTo:with: 'self addAll: (<2s>) to: (<1s>)')
			#(#addAllFirstSendTo:with: 'self addAllFirst: (<2s>) to: (<1s>)')
			#(#addSendTo:with: 'self add: (<2s>) to: (<1s>)')
			#(#addFirstSendTo:with: 'self addFirst: (<2s>) to: (<1s>)')
			#(#arrayType '')
			#(#assignArray:index:to: '(<1s>) at: (<2p>) put: (<3s>)')
			#(#assignmentTo:from: '<1s> := <2s>')
			#(#at:index: '(<1s>) at: <2p>')
			#(#bitXor:with: '(<1s>) bitXor: (<2s>)')
			#(#booleanType '')
			#(#cast:to: '<1s>')
			#(#collectionType '')
			#(#collectionVariableItemsIn:forCollectionGetter:andVariableGetter: 'SmaCCParseNode collectionVariableIn: (<1s>) collectionGetter: <2p> variableGetter: <3p>')
			#(#compareEqual:to: '(<1s>) = (<2s>)')
			#(#copy:inContext:onlyNodes: '<1s> collect: [:each | <3?:(each isKindOf: SmaCCParseNode) ifTrue: [>each copyInContext: <2s>]<3?:]>')
			#(#copyNode: '(<1s>) copy')
			#(#copyNodeCollection: '(<1s>) collect: [:each | each copy]')
			#(#dictionaryType '')
			#(#endConditionalString ']')
			#(#endDoWhileLoopWithClause: '<1s>] whileTrue')
			#(#endLiteralArray ')')
			#(#endMethodString '')
			#(#hashFor: '(<1s>) hash')
			#(#ifFalseReturn: '(<1s>) ifFalse: [^false]')
			#(#integerType '')
			#(#isKindOfTest:class: '(<1s> isKindOf: <2s>) ifTrue: [')
			#(#iterateObjects:name: '(<1s>) do: [:<2s> |')
			#(#literalArraySeparator ' ')
			#(#newArrayOfSize: 'Array new: <1p>')
			#(#newCollectionOfSize: 'OrderedCollection new: <1p>')
			#(#newObject: '<1s> new')
			#(#newUnsignedShortArrayArray '#(')
			#(#nodeCollectionType 'OrderedCollection')
			#(#notNilCheckFor: '(<1s>) notNil ifTrue: [')
			#(#objectType 'Object')
			#(#private '')
			#(#protected '')
			#(#public '')
			#(#receiverName 'self')
			#(#reduceActionArrayType '')
			#(#reduceActionLiteralStart '#(')
			#(#return: '^<1s>')
			#(#startDoWhileLoop '[')
			#(#startIfWithClause: '(<1s>) ifTrue: [')
			#(#statementSeparator '.')
			#(#static '')
			#(#stringType '')
			#(#undefinedObject 'nil')
			#(#unsignedShort '')
			#(#unsignedShortArrayArray '')
			#(#uppercaseString: '(<1s>) asUppercase')
			#(#variableDeclaration:ofType: '| <1s> |')
			#(#variableItemIn:forVariableGetter: 'SmaCCParseNode variableIn: (<1s>) getter: <2p>')
			#(#virtual '')
			#(#voidType '')
		)